package com.alex.webshop.repository;

import android.util.Log;

import com.alex.webshop.model.Brand;
import com.alex.webshop.model.Category;
import com.alex.webshop.model.Color;
import com.alex.webshop.model.Product;
import com.alex.webshop.service.ConnectionEnum;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ProductRepo {

    private final ConnectionEnum connectionEnum;

    public ProductRepo(ConnectionEnum connectionEnum) {
        this.connectionEnum = connectionEnum;
    }

    public List<Product> getAllProducts() {
        List<Product> allProducts = new ArrayList<>();
        Product tempProduct;

        try (Connection con = DriverManager.getConnection(connectionEnum.getConnString(), connectionEnum.getUser(), connectionEnum.getPass())) {

            // The object used for executing a static SQL statement and returning the results it produces
            Statement statement = con.createStatement();

            // A table of data representing a database result set,
            // which is usually generated by executing a statement that queries the database.
            ResultSet resultSet = statement.executeQuery("SELECT Product.id, Product.name, Product.price, Brand.name as 'Brand', Brand.id as 'Brand Id', ProductSize.stock, ShoeSize.euSize as 'Size', Color.name as 'Color', Color.id as 'Color Id', Category.id as 'Category Id', Category.name as 'Category', ProductSize.id as 'ProductSizeId' "
                    + "FROM Product "
                    + "INNER JOIN ProductSize ON ProductSize.productId = Product.id "
                    + "INNER JOIN Brand ON Brand.id = Product.brandId " +
                    "INNER JOIN ShoeSize ON ProductSize.shoeSizeId = ShoeSize.id " +
                    "INNER JOIN ProductColor ON ProductColor.productId = Product.id " +
                    "INNER JOIN Color ON ProductColor.colorId = Color.id " +
                    "INNER JOIN ProductCategory ON ProductCategory.productId = Product.id " +
                    "INNER JOIN Category ON ProductCategory.categoryId = Category.id ");


            while (resultSet.next()) {
                tempProduct = new Product();
                tempProduct.setId(resultSet.getInt("id"));
                tempProduct.setName(resultSet.getString("name"));
                tempProduct.setPrice(resultSet.getInt("price"));
                tempProduct.setBrand(new Brand(resultSet.getInt("Brand Id"), resultSet.getString("Brand")));
                tempProduct.setStock(resultSet.getInt("stock"));
                tempProduct.setEuSize(resultSet.getInt("Size"));
                tempProduct.setColor(new Color(resultSet.getInt("Color Id"), resultSet.getString("Color")));
                tempProduct.setCategory(List.of(new Category(resultSet.getInt("Category Id"), resultSet.getString("Category"))));
                tempProduct.setProductSizeId(resultSet.getInt("ProductSizeId"));
                allProducts.add(tempProduct);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            Log.d("webshopen", "Error reading products from db");
        }

        return allProducts;
    }
}
